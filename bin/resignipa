#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'methadone'
require 'app_tools/version'
require 'fileutils'
require 'cfpropertylist'
require 'zip'

#
# This project is an extraction and rewrite in Ruby of
# https://github.com/drewcrawford/CaveJohnson/blob/master/cavejohnson/__init__.py#L122
#

module AppTools
  module ResignIpa
    include Methadone::Main
    include Methadone::CLILogging
    include Methadone::ExitNow

    main do |ipa_path|
      unless File.exist?(ipa_path) and File.extname(ipa_path) == '.ipa'
        exit_now! "Must supply an .ipa path to process"
      end

      ipa_basename = File.basename(ipa_path)
      profile_path = options[:p]

      unless File.exist?(profile_path)
        exit_now! "Must supply a valid provisioning profile"
      end

      ## Extract the entitlements from the provisioning profile
      entitlements_xml =`security cms -D -i "#{profile_path}"`
      entitlements_plist = CFPropertyList::List.new(:data => entitlements_xml)
      entitlements_data = CFPropertyList.native_types(entitlements_plist.value)

      ## Get the app PList
      ipa_plist_data = nil

      Zip::File.open(ipa_path) do |zip_file|
        entry = zip_file.glob('Payload/*/Info.plist').first
        plist = CFPropertyList::List.new(:data => entry.get_input_stream.read)
        ipa_plist_data = CFPropertyList.native_types(plist.value)
      end

      ## Make sure app id and entitlements id match
      entitlements_app_id = entitlements_data["Entitlements"]["application-identifier"]
      ipa_app_id = ipa_plist_data["CFBundleIdentifier"]

      unless entitlements_app_id.end_with?(ipa_app_id)
          exit_now!("Entitlements app id #{entitlements_app_id} doesn't match Info.plist identifier #{ipa_app_id}")
      end

      ## Creating a temp dir to work in
      temp_dir = File.join(File.dirname(ipa_path), ipa_basename + '.tmp')

      FileUtils.rm_rf temp_dir
      FileUtils.mkdir temp_dir

      ## Unzip the existing IPA into the temp dir
      `unzip #{ipa_path} -d #{temp_dir}`

      ## Get all dirs to be signed
      # See http://www.xgiovio.com/blog-photos-videos-other/blog/resign-your-ios-ipa-frameworks-and-plugins-included/
      payload_dir = File.join(temp_dir, "Payload")
      sign_dirs = `find -d #{payload_dir} \\( -name \\*.app -o -name \\*.framework -o -name \\*.appex -name \\*.dylib \\)`.split("\n")

      ## Embed the new provisioning profile
      app_dir = `find -d #{payload_dir} -name \\*.app`.split("\n")
      FileUtils.cp profile_path, File.join(app_dir, "embedded.mobileprovision")

      ## Write the entitlements file
      entitlements_path = File.join(temp_dir, "entitlements.plist")
      File.write(entitlements_path,
          entitlements_data["Entitlements"].to_plist(:plist_format => CFPropertyList::List::FORMAT_XML))

      ## Finally, resign all the files
      sign_dirs.each do |sign_dir|
        if sign_dir.end_with?(".framework") or sign_dir.end_with?(".dylib")
          # See https://github.com/fastlane/sigh/blob/master/lib/assets/resign.sh#L412
          pid = Process.spawn("codesign", "-f", "-s", "iPhone Distribution: " + options[:c], sign_dir)
        else
          pid = Process.spawn("codesign", "-f", "-s", "iPhone Distribution: " + options[:c], "--entitlements", entitlements_path, sign_dir)
        end
        Process.wait(pid)

        unless $?.exitstatus == 0
          exit_now! "Failed to sign files in #{sign_dir}"
        end
      end

      ## Repack
      new_ipa_dir = File.join(File.dirname(ipa_path), ipa_basename + ".resigned")
      new_ipa_path = File.join(new_ipa_dir, File.basename(ipa_path))
      FileUtils.rm_rf new_ipa_dir
      FileUtils.mkdir new_ipa_dir

      `cd #{temp_dir}; zip -r ../#{ipa_basename + ".resigned"}/#{ipa_basename} *`
      FileUtils.rm_rf temp_dir
      puts new_ipa_path
    end

    description 'resignipa - Resign an IPA with a certificate and provisioning profile'
    version AppTools::VERSION

    on("-p", "--provisioning-profile PROFILE_PATH", "File name of the provisioning profile")
    on("-c", "--certificate-name CERTIFICATE_NAME", "Name of the certificate to use for signing")

    arg :ipa_path, "Original IPA file", :require

    use_log_level_option :toggle_debug_on_signal => 'USR1'

    go!
  end
end
