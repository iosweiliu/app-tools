#!/usr/bin/env ruby

require 'rubygems'
require 'methadone'
require 'app_tools/version'
require 'fileutils'

#
# This project is an extraction and rewrite in Ruby of
# https://github.com/drewcrawford/CaveJohnson/blob/master/cavejohnson/__init__.py#L122
#

module AppTools
  module ResignIpa
    include Methadone::Main
    include Methadone::CLILogging
    include Methadone::ExitNow

    main do |ipa_path|
      if ipa_path.nil? or !File.exist?(ipa_path) or !File.extname(ipa_path) == '.ipa'
        exit_now! "Must supply a .ipa path to process"
      end

      ipa_dir = File.dirname(ipa_path)
      cert_name = options[:certificate_name]
      new_ipa_dir = File.join(ipa_dir, cert_name)

      FileUtils.rm_rf new_ipa_dir
      FileUtils.mkdir new_ipa_dir

      new_ipa_path = File.join(new_ipa_dir, File.basename(ipa_path))

      entitlements_text = `security cms -D -i #{new_mobileprovision_path}`
      entitlements_plist = CFPropertyList::List.new(:data => entitlements_text)
      entitlements_plist_data = CFPropertyList.native_types(plist.value)

      ipa_plist_data = nil

      Zip::File.open(ipa_path) do |zip_file|
        entry = zip_file.glob('Payload/*/Info.plist').first
        plist = CFPropertyList::List.new(:data => entry.get_input_stream.read)
        ipa_plist_data = CFPropertyList.native_types(plist.value)
      end

      entitlements_app_id = entitlements_data["Entitlements"]["application-identifier"]
      ipa_app_id = ipa_plist_data["CFBundleIdentifier"]

      if not entitlements_app_id.endswith(ipa_app_id)
          exit_now!("Entitlements app id #{entitlements_app_id} doesn't match Info.plist identifier #{ipa_app_id}")
      end

      # TODO: Random number here
      temp_dir = File.join(ipa_dir, "123456")
      FileUtils.mkdir temp_dir
    end

    description 'resignipa - Resign an IPA with a certificate and provisioning profile'
    version AppTools::VERSION

    on("-c", "--certificate-name CERTIFICATE_NAME", "Name of the certificate to use for signing")

    arg :ipa_path, "An IPA path", :require

    use_log_level_option :toggle_debug_on_signal => 'USR1'

    go!
  end
end
