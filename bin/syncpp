#!/usr/bin/env ruby

require 'rubygems'
require 'methadone'
require 'app_tools/version'
require 'fileutils'
require 'spaceship'

#
# This project is an extraction and rewrite in Ruby of
# https://github.com/drewcrawford/CaveJohnson/blob/master/cavejohnson/__init__.py#L122
#

module AppTools
  module SyncPp
    include Methadone::Main
    include Methadone::CLILogging
    include Methadone::ExitNow

    main do |profile_name|
      itunes_user = options[:u]
      itunes_password = options[:p]
      name = "app-tools-itunesconnect"

      if itunes_user.nil?
        exit_now! "Must supply a user name"
      end

      if itunes_password.nil?
        r, w = IO.pipe
        pid = Process.spawn('security', 'find-generic-password', '-s', name, '-w', :out => w)
        w.close
        Process.wait(pid)
        if $?.exitstatus != 0
          exit_now! "Could not find generic password '#{name}'"
        end
        itunes_password = r.read.chomp
        r.close
      end

      if itunes_password.nil?
        exit_now! "No password given and non found in keychain"
      end

      Spaceship.login(itunes_user, itunes_password)

      profiles = Spaceship.provisioning_profile.app_store.all
      profile = profiles.find do |profile|
        profile.name == profile_name
      end

      if profile.nil?
        exit_now! "Provisioning profile #{profile_name} not found"
      end

      if profile.type != 'iOS Distribution'
        exit_now! "The profile must use an iOS distribution certificate"
      end

      unless profile.valid?
        profile.repair!
      end

      profile_prod_cert = profile.certificates.find do |cert|
        cert.name == profile.type
      end

      prod_certs = Spaceship.certificate.production.all
      prod_cert = prod_certs.find do |cert|
        cert.id == profile.certificates.first.id
      end

      profile_path = "#{profile_name}.mobileprovision"

      File.write(profile_path, profile.download)

      puts prod_cert.name
    end

    description 'syncpp - Synchronize a certificate and provisioning profile'
    version AppTools::VERSION

    on("-u", "--itunes-user USER", "iTunesConnect user")
    on("-p", "--itunes-password PASSWORD", "iTunesConnect password")

    arg :profile_name, "Profile name", :required

    use_log_level_option :toggle_debug_on_signal => 'USR1'

    go!
  end
end
